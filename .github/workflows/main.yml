name: CI/CD Parallel Jobs

on:
  push:
    branches:
      - 'main'
  pull_request:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
    
jobs:

# FIRST JOB #######################################################################   
  build-test-image:
    name: Build Image for Testing
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write # needed to push docker image to ghcr.io

    steps:

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        id: buildx
        with:
          install: true

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to ghcr.io registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and Push to GHCR
        id: docker_build
        uses: docker/build-push-action@v3
        with:
          push: ${{ endswith(github.ref, 'main') }} # Only push if we are on the main branch
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
    
# NEXT JOB #######################################################################   
  test-unit:
    name: Unit tests in Docker
    needs: [build-test-image]
    runs-on: ubuntu-latest

    permissions:
      packages: read
      
    steps:
      
      - name: Login to ghcr.io registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Unit Testing in Docker
        run: docker run --rm ghcr.io/mariushincu/test:main echo "run test commands here"

# NEXT JOB #######################################################################   
  # test-integration:
  #   name: Integration tests in Compose
  #   needs: [build-test-image]
  #   runs-on: ubuntu-latest

  #   permissions:
  #     contents: read
  #     packages: read

  #   steps:

  #     - name: Checkout git repo
  #       uses: actions/checkout@v3

  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}
      
  #     - name: Login to ghcr.io registry
  #       uses: docker/login-action@v2
  #       with:
  #         registry: ${{ env.REGISTRY }}
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Test healthcheck in Docker Compose
  #       run: |
  #         export TESTING_IMAGE=ghcr.io/mariushincu/test:main
  #         echo Testing image: "$TESTING_IMAGE"
  #         docker compose -f docker-compose.test.yml up 

# # NEXT JOB #######################################################################   
  test-k3d:
    name: Test Deployment in Kubernetes
    needs: [build-test-image]
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: read

    steps:

      - name: Checkout git repo
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Login to ghcr.io registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: AbsaOSS/k3d-action@v2
        with:
          cluster-name: "test-cluster-1"
          args: >-
            --agents 1
            --no-lb
            --k3s-arg "--no-deploy=traefik,servicelb,metrics-server@server:*"
      
      - name: Smoke test deployment in k3d Kubernetes
        run: |
          kubectl create secret docker-registry regcred \
            --docker-server=https://ghcr.io \
            --docker-username=${{ github.actor }} \
            --docker-password=${{ secrets.GITHUB_TOKEN }}
          export TESTING_IMAGE=ghcr.io/mariushincu/test:main
          envsubst < k8s.yaml | kubectl apply -f -
          kubectl rollout status deployment webapp

# NEXT JOB #######################################################################   
  scan-image:
    name: Scan Image with Trivy
    needs: [build-test-image]
    runs-on: ubuntu-latest

    permissions:
      contents: read # for actions/checkout to fetch code
      packages: read # needed to pull docker image to ghcr.io
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      # actions: read
      statuses: write

    steps:

      - name: Checkout git repo
        uses: actions/checkout@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Login to ghcr.io registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull image to scan
        run: docker pull ghcr.io/mariushincu/test:main
        
      - name: Run Trivy for all CVEs (non-blocking)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ghcr.io/mariushincu/test:main
          format: table
          exit-code: 0

      - name: Run Trivy for HIGH,CRITICAL CVEs and report (blocking)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ghcr.io/mariushincu/test:main
          exit-code: 1
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'HIGH,CRITICAL'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

# NEXT JOB #######################################################################   
  # build-final-image:
  #   name: Build Final Image
  #   needs: [test-unit, test-k3d, scan-image] # [test-unit, test-integration, test-k3d, scan-image]
  #   runs-on: ubuntu-latest

  #   permissions:
  #     packages: write # needed to push docker image to ghcr.io
  #     pull-requests: write # needed to create and update comments in PRs

  #   steps:

  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v2

  #     # Setting up Docker Buildx with docker-container driver is required
  #     # at the moment to be able to use a subdirectory with Git context
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2

  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}

  #     - name: Login to ghcr.io registry
  #       uses: docker/login-action@v2
  #       with:
  #         registry: ${{ env.REGISTRY }}
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Docker Metadata for Final Image Build
  #       id: meta
  #       uses: docker/metadata-action@v3
  #       with:
  #         images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
  #         flavor: |
  #           latest=false
  #         tags: |
  #           type=raw,value=99
  #           type=raw,value=latest,enable=${{ endsWith(github.ref, github.event.repository.default_branch) }}
  #           type=ref,event=pr
  #           type=ref,event=branch
  #           type=semver,pattern={{version}}
      
  #     - name: Docker Build and Push to GHCR and Docker Hub
  #       uses: docker/build-push-action@v3
  #       with:
  #         push: ${{ endswith(github.ref, 'main') }} # Only push if we are on the main branch
  #         tags: ${{ steps.meta.outputs.tags }}
  #         labels: ${{ steps.meta.outputs.labels }}
  #         cache-from: type=gha
  #         cache-to: type=gha,mode=max
  #         platforms: linux/amd64,linux/arm64,linux/arm/v7
         
      # If PR, put image tags in the PR comments
      # from https://github.com/marketplace/actions/create-or-update-comment
        
      # - name: Find comment for image tags
      #   uses: peter-evans/find-comment@v1
      #   if: github.event_name == 'pull_request'
      #   id: fc
      #   with:
      #     issue-number: ${{ github.event.pull_request.number }}
      #     comment-author: 'github-actions[bot]'
      #     body-includes: Docker image tag(s) pushed
      
        # If PR, put image tags in the PR comments
      # - name: Create or update comment for image tags
      #   uses: peter-evans/create-or-update-comment@v1
      #   if: github.event_name == 'pull_request'
      #   with:
      #     comment-id: ${{ steps.fc.outputs.comment-id }}
      #     issue-number: ${{ github.event.pull_request.number }}
      #     body: |
      #       Docker image tag(s) pushed:
      #       ```text
      #       ${{ steps.docker_meta.outputs.tags }}
      #       ```

      #       Labels added to images:
      #       ```text
      #       ${{ steps.docker_meta.outputs.labels }}
      #       ```
      #     edit-mode: replace

# NEXT JOB ########################################################################

  # deployment-job:
  #     name: Deploy on GCP
  #     needs: [test-unit, test-k3d, scan-image]
  #     runs-on: ubuntu-latest
  #     env:
  #       IMAGE_NAME: test-app
  #       PROJECT_ID: anderspink-app
  #     steps:
  #       - name: Authenticate to Google Cloud
  #         uses: actions/checkout@v2

  #       - uses: google-github-actions/auth@v0

  #       - name: Setup Cloud Run
  #         uses: google-github-actions/setup-gcloud@master
  #         with:
  #           service_account_key: ${{ secrets.SERVICE_ACCOUNT_KEY }}
  #           project_id: ${{ env.PROJECT_ID }}
  #           export_default_credentials: true

  #       - name: Build Docker Image
  #         run: docker build -t $IMAGE_NAME:latest .

  #       - name: Configure Docker Client
  #         run: |-
  #           gcloud auth configure-docker --quite


  #       - name: Push Docker Image to Container Registry (GCR)
  #         env: 
  #           GIT_TAG: v0.1.0
  #         run: |-
  #           docker tag $IMAGE_NAME:latest gcr.io/$PROJECT_ID/$IMAGE_NAME:latest
  #           docker tag $IMAGE_NAME:latest gcr.io/$PROJECT_ID/$IMAGE_NAME:$GIT_TAG
  #           docker push gcr.io/$PROJECT_ID/$IMAGE_NAME:latest
  #           docker push gcr.io/$PROJECT_ID/$IMAGE_NAME:$GIT_TAG

  #       # - name: Deploy to Cloud Run
  #       #   uses: google-github-actions/deploy-cloudrun@v0
  #       #   with:
  #       #     workload_identity_provider: XXX
  #       #     service_account: XXX
  #       # - name: Deploy to Cloud Run
  #       #   uses: google-github-actions/deploy-cloudrun@v0
  #       #   with:
  #       #     service: ${{ env.SERVICE_NAME }}
  #       #     source: gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ env.PACKAGE_VERSION }} # equivalent to "gcloud builds submit ..."
  #       #     region: ${{ env.RUN_REGION }}
  #       #     tag: ${{ env.PACKAGE_VERSION }}